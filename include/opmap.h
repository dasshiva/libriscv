#ifndef __OPMAP_H__
#define __OPMAP_H__

#include <cstdint>
//  Opcodes for extensions skipped until implemented
//  As the two low bits are reserved to 0b11,
//  all valid opcodes begin from 3 (binary 0b11) 

// The only major opcodes we know about
#define UNDEF_OPCODE (0xFFFFFFFFU)
#define LOAD         (0U)
#define MISC_MEM     (1U)
#define OP_IMM       (2U)
#define AUIPC        (3U)
#define OP_IMM32     (4U)
#define STORE        (5U)
#define OP           (6U)
#define LUI          (7U)
#define OP_32        (8U)
#define BRANCH       (9U)
#define JALR         (0xAU)
#define JAL          (0xBU)
#define SYSTEM       (0xCU)

// The comments at some entries indicate the opcodes which are unimplemented
#if defined (__clang__) || defined(__GNUC__)
//  RISC-V base opcode map, inst[1:0]=11
static const uint32_t OpcodeMap[] = {
    [0b0] = UNDEF_OPCODE,
    [0b1] = UNDEF_OPCODE,
    [0b10] = UNDEF_OPCODE,
    [0b11] = LOAD,
    [0b100] = UNDEF_OPCODE,
    [0b101] = UNDEF_OPCODE,
    [0b110] = UNDEF_OPCODE,
    [0b111] = UNDEF_OPCODE, // LOAD-FP
    [0b1000] = UNDEF_OPCODE,
    [0b1001] = UNDEF_OPCODE,
    [0b1010] = UNDEF_OPCODE,
    [0b1011] = UNDEF_OPCODE, // CUSTOM-0
    [0b1100] = UNDEF_OPCODE,
    [0b1101] = UNDEF_OPCODE,
    [0b1110] = UNDEF_OPCODE,
    [0b1111] = MISC_MEM,
    [0b10000] = UNDEF_OPCODE,
    [0b10001] = UNDEF_OPCODE,
    [0b10010] = UNDEF_OPCODE,
    [0b10011] = OP_IMM,
    [0b10100] = UNDEF_OPCODE,
    [0b10101] = UNDEF_OPCODE,
    [0b10110] = UNDEF_OPCODE,
    [0b10111] = AUIPC,
    [0b11000] = UNDEF_OPCODE,
    [0b11001] = UNDEF_OPCODE,
    [0b11010] = UNDEF_OPCODE,
    [0b11011] = OP_IMM32,
    [0b11100] = UNDEF_OPCODE,
    [0b11101] = UNDEF_OPCODE,
    [0b11110] = UNDEF_OPCODE,
    [0b11111] = UNDEF_OPCODE, // 48 bit instructions
    [0b100000] = UNDEF_OPCODE,
    [0b100001] = UNDEF_OPCODE,
    [0b100010] = UNDEF_OPCODE,
    [0b100011] = STORE,
    [0b100100] = UNDEF_OPCODE,
    [0b100101] = UNDEF_OPCODE,
    [0b100110] = UNDEF_OPCODE,
    [0b100111] = UNDEF_OPCODE, // STORE-FP
    [0b101000] = UNDEF_OPCODE,
    [0b101001] = UNDEF_OPCODE,
    [0b101010] = UNDEF_OPCODE,
    [0b101011] = UNDEF_OPCODE, // CUSTOM-1
    [0b101100] = UNDEF_OPCODE,
    [0b101101] = UNDEF_OPCODE,
    [0b101110] = UNDEF_OPCODE,
    [0b101111] = UNDEF_OPCODE, // AMO
    [0b110000] = UNDEF_OPCODE,
    [0b110001] = UNDEF_OPCODE,
    [0b110010] = UNDEF_OPCODE,
    [0b110011] = OP,
    [0b110100] = UNDEF_OPCODE,
    [0b110101] = UNDEF_OPCODE,
    [0b110110] = UNDEF_OPCODE,
    [0b110111] = LUI,
    [0b111000] = UNDEF_OPCODE,
    [0b111001] = UNDEF_OPCODE,
    [0b111010] = UNDEF_OPCODE,
    [0b111011] = OP_32,
    [0b111100] = UNDEF_OPCODE,
    [0b111101] = UNDEF_OPCODE,
    [0b111110] = UNDEF_OPCODE,
    [0b111111] = UNDEF_OPCODE, // 64-byte instructions
    [0b1000000] = UNDEF_OPCODE,
    [0b1000001] = UNDEF_OPCODE,
    [0b1000010] = UNDEF_OPCODE,
    [0b1000011] = UNDEF_OPCODE, // MADD
    [0b1000100] = UNDEF_OPCODE,
    [0b1000101] = UNDEF_OPCODE,
    [0b1000110] = UNDEF_OPCODE,
    [0b1000111] = UNDEF_OPCODE, // MSUB
    [0b1001000] = UNDEF_OPCODE,
    [0b1001001] = UNDEF_OPCODE,
    [0b1001010] = UNDEF_OPCODE,
    [0b1001011] = UNDEF_OPCODE, // NMSUB
    [0b1001100] = UNDEF_OPCODE,
    [0b1001101] = UNDEF_OPCODE,
    [0b1001110] = UNDEF_OPCODE,
    [0b1001111] = UNDEF_OPCODE, // NMADD
    [0b1010000] = UNDEF_OPCODE,
    [0b1010001] = UNDEF_OPCODE,
    [0b1010010] = UNDEF_OPCODE,
    [0b1010011] = UNDEF_OPCODE, // OP-FP
    [0b1010100] = UNDEF_OPCODE,
    [0b1010101] = UNDEF_OPCODE,
    [0b1010110] = UNDEF_OPCODE,
    [0b1010111] = UNDEF_OPCODE, // OP-V
    [0b1011000] = UNDEF_OPCODE,
    [0b1011001] = UNDEF_OPCODE,
    [0b1011010] = UNDEF_OPCODE,
    [0b1011011] = UNDEF_OPCODE, // CUSTOM-2/RV-128
    [0b1011100] = UNDEF_OPCODE,
    [0b1011101] = UNDEF_OPCODE,
    [0b1011110] = UNDEF_OPCODE,
    [0b1011111] = UNDEF_OPCODE, // 48-Byte instructions
    [0b1100000] = UNDEF_OPCODE,
    [0b1100001] = UNDEF_OPCODE,
    [0b1100010] = UNDEF_OPCODE,
    [0b1100011] = BRANCH,
    [0b1100100] = UNDEF_OPCODE,
    [0b1100101] = UNDEF_OPCODE,
    [0b1100110] = UNDEF_OPCODE,
    [0b1100111] = JALR,
    [0b1101000] = UNDEF_OPCODE,
    [0b1101001] = UNDEF_OPCODE,
    [0b1101010] = UNDEF_OPCODE,
    [0b1101011] = UNDEF_OPCODE, // Reserved for future extensions
    [0b1101100] = UNDEF_OPCODE,
    [0b1101101] = UNDEF_OPCODE,
    [0b1101110] = UNDEF_OPCODE,
    [0b1101111] = JAL,
    [0b1110000] = UNDEF_OPCODE,
    [0b1110001] = UNDEF_OPCODE,
    [0b1110010] = UNDEF_OPCODE,
    [0b1110011] = SYSTEM,
    [0b1110100] = UNDEF_OPCODE,
    [0b1110101] = UNDEF_OPCODE,
    [0b1110110] = UNDEF_OPCODE,
    [0b1110111] = UNDEF_OPCODE, // OP-VE
    [0b1111000] = UNDEF_OPCODE,
    [0b1111001] = UNDEF_OPCODE,
    [0b1111010] = UNDEF_OPCODE,
    [0b1111011] = UNDEF_OPCODE, // CUSTOM-3/RV-128
    [0b1111100] = UNDEF_OPCODE,
    [0b1111101] = UNDEF_OPCODE,
    [0b1111110] = UNDEF_OPCODE,
    [0b1111111] = UNDEF_OPCODE, // Instructions greater than 80 bytes
};

#else // endif __clang__ || __GNUC__
static const uint32_t OpcodeMap[] = {
// MSVC does not seem to support array designators
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    LOAD,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    MISC_MEM,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    OP_IMM,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    AUIPC,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    OP_IMM32,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    STORE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    OP,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    LUI,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    OP_32,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    BRANCH,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    JALR,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    JAL,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    SYSTEM,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
    UNDEF_OPCODE,
};
#endif

#endif
